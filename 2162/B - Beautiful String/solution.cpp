#include "bits/stdc++.h"#define int long long#define uint unsigned long long#define vi vector<int>#define vvi vector<vi>#define vb vector<bool>#define vvb vector<vb>#define fr(i, n) for (int i = 0; i < (n); i++)#define rep(i, a, n) for (int i = (a); i <= (n); i++)#define nl cout << "\n"#define dbg(var) cout << #var << "=" << var << " "#define all(v) v.begin(), v.end()#define sz(v) (int)(v.size())#define srt(v) sort(v.begin(), v.end())         // sort#define mxe(v) *max_element(v.begin(), v.end()) // find max element in vector#define mne(v) *min_element(v.begin(), v.end()) // find min element in vector#define unq(v) v.resize(distance(v.begin(), unique(v.begin(), v.end())));// make sure to sort before applying unique // else only consecutive duplicates would be removed#define bin(x, y) bitset<y>(x)using namespace std;int MOD = 1e9 + 7; // Hardcoded, directly change from here for functions! void modadd(int &a, int b) { a = ((a % MOD) + (b % MOD)) % MOD; }void modsub(int &a, int b) { a = ((a % MOD) - (b % MOD) + MOD) % MOD; }void modmul(int &a, int b) { a = ((a % MOD) * (b % MOD)) % MOD; }// ================================== take ip/op like vector,pairs directly!==================================template <typename typC, typename typD>istream &operator>>(istream &cin, pair<typC, typD> &a) { return cin >> a.first >> a.second; }template <typename typC>istream &operator>>(istream &cin, vector<typC> &a){    for (auto &x : a)        cin >> x;    return cin;}template <typename typC, typename typD>ostream &operator<<(ostream &cout, const pair<typC, typD> &a) { return cout << a.first << ' ' << a.second; }template <typename typC, typename typD>ostream &operator<<(ostream &cout, const vector<pair<typC, typD>> &a){    for (auto &x : a)        cout << x << '\n';    return cout;}template <typename typC>ostream &operator<<(ostream &cout, const vector<typC> &a){    int n = a.size();    if (!n)        return cout;    cout << a[0];    for (int i = 1; i < n; i++)        cout << ' ' << a[i];    return cout;}// ===================================END Of the input module ========================================== bool is_palindrome(const string &s){    string t = s;    reverse(t.begin(), t.end());    return s == t;} bool is_nondecreasing(const string &s){    for (int i = 1; i < (int)s.size(); i++)        if (s[i] < s[i - 1])            return false;    return true;} void solve(){    int n;    cin >> n;    string s;    cin >> s;     bool found = false;     for (int mask = 0; mask < (1 << n); mask++)    {        string p = "", x = "";        vector<int> idx;        for (int i = 0; i < n; i++)        {            if (mask & (1 << i))            {                p += s[i];                idx.push_back(i + 1);            }            else            {                x += s[i];            }        }         if (is_nondecreasing(p) and is_palindrome(x))        {            cout << (int)idx.size() << "\n";            if (!idx.empty())            {                for (int i = 0; i < (int)idx.size(); i++)                {                    cout << idx[i] << (i + 1 == idx.size() ? '\n' : ' ');                }            }            found = true;            break;        }    }    if(!found) {        cout << -1 << "\n";    }} int32_t main(){     ios_base::sync_with_stdio(false);    cin.tie(NULL);     int T;    cin >> T;    while (T--)    {        solve();    }    return 0;}