#include <bits/stdc++.h>using namespace std; int ask(int x, vector<int> s) {    cout << "? " << x << " " << s.size();    for (int node : s) {        cout << " " << node;    }    cout << endl;    int res;    cin >> res;    if (res == -1) {        exit(0);    }    return res;} int main() {    int t;    cin >> t;    while (t--) {        int n;        cin >> n;        vector<int> f(n+1, 0);        vector<int> all_nodes;        for (int i = 1; i <= n; i++) {            all_nodes.push_back(i);        }        for (int i = 1; i <= n; i++) {            f[i] = ask(i, all_nodes);        }                map<int, vector<int>> levels;        for (int i = 1; i <= n; i++) {            levels[f[i]].push_back(i);        }                int L_max = 0;        for (int i = 1; i <= n; i++) {            if (f[i] > L_max) {                L_max = f[i];            }        }                int current = levels[L_max][0];        vector<int> path;        path.push_back(current);                for (int i = L_max - 1; i >= 1; i--) {            vector<int> level_list = levels[i];            if (level_list.size() == 1) {                current = level_list[0];                path.push_back(current);            } else {                vector<int> candidates = level_list;                while (candidates.size() > 1) {                    int mid = candidates.size() / 2;                    vector<int> first_half(candidates.begin(), candidates.begin() + mid);                    vector<int> S;                    S.push_back(current);                    S.insert(S.end(), first_half.begin(), first_half.end());                    int response = ask(current, S);                    if (response > 1) {                        candidates = first_half;                    } else {                        candidates = vector<int>(candidates.begin() + mid, candidates.end());                    }                }                current = candidates[0];                path.push_back(current);            }        }                cout << "! " << path.size();        for (int node : path) {            cout << " " << node;        }        cout << endl;    }    return 0;}